// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using SistemaAtualEmprestimo.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SistemaAtualEmprestimo.Models
{
    public partial class EmprestimoAtualContext
    {
        private IEmprestimoAtualContextProcedures _procedures;

        public virtual IEmprestimoAtualContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EmprestimoAtualContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IEmprestimoAtualContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
        }
    }

    public partial class EmprestimoAtualContextProcedures : IEmprestimoAtualContextProcedures
    {
        private readonly EmprestimoAtualContext _context;

        public EmprestimoAtualContextProcedures(EmprestimoAtualContext context)
        {
            _context = context;
        }

        public virtual async Task<int> DevolucaoAsync(int? Id_LivroCliente, int? qtd, OutputParameter<string> Retorno, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRetorno = new SqlParameter
            {
                ParameterName = "Retorno",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Retorno?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id_LivroCliente",
                    Value = Id_LivroCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "qtd",
                    Value = qtd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterRetorno,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Devolucao] @Id_LivroCliente = @Id_LivroCliente, @qtd = @qtd, @Retorno = @Retorno OUTPUT", sqlParameters, cancellationToken);

            Retorno.SetValue(parameterRetorno.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EmprestimoAsync(int? id_livro, int? id_cliente, int? qtd, OutputParameter<string> Retorno, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRetorno = new SqlParameter
            {
                ParameterName = "Retorno",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Retorno?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id_livro",
                    Value = id_livro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_cliente",
                    Value = id_cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "qtd",
                    Value = qtd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterRetorno,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Emprestimo] @id_livro = @id_livro, @id_cliente = @id_cliente, @qtd = @qtd, @Retorno = @Retorno OUTPUT", sqlParameters, cancellationToken);

            Retorno.SetValue(parameterRetorno.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Inserir_LivrosAsync(string nome, string autor, string editora, int? edicao, int? qtd, DateTime? data_lancamento, OutputParameter<string> retorno, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterretorno = new SqlParameter
            {
                ParameterName = "retorno",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = retorno?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nome",
                    Size = 50,
                    Value = nome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "autor",
                    Size = 50,
                    Value = autor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "editora",
                    Size = 50,
                    Value = editora ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "edicao",
                    Value = edicao ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "qtd",
                    Value = qtd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "data_lancamento",
                    Value = data_lancamento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterretorno,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Inserir_Livros] @nome = @nome, @autor = @autor, @editora = @editora, @edicao = @edicao, @qtd = @qtd, @data_lancamento = @data_lancamento, @retorno = @retorno OUTPUT", sqlParameters, cancellationToken);

            retorno.SetValue(parameterretorno.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InserirClienteAsync(string BI, string Nome, string Mun, int? Contacto, OutputParameter<string> Retorno, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRetorno = new SqlParameter
            {
                ParameterName = "Retorno",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Retorno?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BI",
                    Size = 50,
                    Value = BI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nome",
                    Size = 50,
                    Value = Nome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mun",
                    Size = 50,
                    Value = Mun ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contacto",
                    Value = Contacto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterRetorno,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InserirCliente] @BI = @BI, @Nome = @Nome, @Mun = @Mun, @Contacto = @Contacto, @Retorno = @Retorno OUTPUT", sqlParameters, cancellationToken);

            Retorno.SetValue(parameterRetorno.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
